#!/bin/bash
#
# NAME="set_dir_perm"
# ARG_NUM="2"
# ARG#1="dir name to update"
# ARG#2="perm to set the directory"
# DESC="set perm to a directory"
# 

source modules.d/file_module.sh

function set_dir_perm {

	local job_name="$2"
	local job_id="$3"
	local file_name="$4"
	local perm_wanted="$5"
  local job_id_print=`if [[ ${job_id} -lt 10 ]]; then echo "0${job_id}" ; else echo ${job_id} ; fi`
	local msg_test_success="${dir_name} permission ${perm_wanted} correctly set"
	local msg_test_failure="${dir_name} permission ${perm_wanted} not correctly set"
  local msg_backup_success="${dir_name} permission backup success"
	local msg_backup_failure="${dir_name} permission backup failed"
	local msg_restore_success="${dir_name} restore permission success"
	local msg_restore_failure="${dir_name} restore permission failed"
	local msg_update_success="${dir_name} update permission ${perm_wanted} successfull"
	local msg_update_failure="${dir_name} update permission ${perm_wanted} failed"
	local dir_exist=0

	if [[ `file_exist "dir" "${file_name}"` -eq 1 ]]; then

		# identify the real file avoid working on symbolic link
		file_name=`file_source_get "${file_name}"`

		local perm=`file_perm_get ${file_name} | awk -F\| '{print $2}'`

		dir_exist=1

	fi
		
	case $1 in
		test)
		
			if [[ ${dir_exist} -eq 1 ]]; then

				if [[ ${perm} -eq ${perm_wanted} ]]; then

					prt_func_res ${job_id_print} ${job_name} "TEST" "OK" "${msg_test_success}"

				else
				
					prt_func_res ${job_id_print} ${job_name} "TEST" "NOK" "${msg_test_failure}"

				fi

			else

				prt_func_res ${job_id_print} ${job_name} "TEST" "NOK" "${msg_test_failure}"

			fi
		;;

		backup)

			if [[ ${dir_exist} -eq 1 ]]; then

				cmd_line="chmod ${perm} ${file_name} &>/dev/null"
				if [[ `metadata_write_restore_cmd "${job_id}" "${cmd_line}"` -eq 1 ]]; then

					prt_func_res ${job_id_print} ${job_name} "BACKUP" "OK" "${msg_backup_success}"

				else
				
					prt_func_res ${job_id_print} ${job_name} "BACKUP" "NOK" "${msg_backup_failure}"

				fi

			else

					prt_func_res ${job_id_print} ${job_name} "BACKUP" "NOK" "${msg_backup_failure}"
				
			fi

		;;

		restore)

			if [[ ${dir_exist} -eq 1 ]]; then

				if [[ `metadata_is_restore_cmd "${job_id}"` -eq 1 ]]; then
			
					local restore_cmd=`metadata_get_restore_cmd "${job_id}"`
					eval ${restore_cmd}

					prt_func_res ${job_id_print} ${job_name} "RESTORE" "OK" "${msg_restore_success}"

				else
				
					prt_func_res ${job_id_print} ${job_name} "RESTORE" "NOK" "${msg_restore_failure}"

				fi

			else

					prt_func_res ${job_id_print} ${job_name} "RESTORE" "NOK" "${msg_restore_failure}"

			fi
		;;

		update)
			
			if [[ ${dir_exist} -eq 1 ]]; then

				if [[ `file_perm_set ${perm_wanted} "${file_name}"` -eq 1 ]]; then

					prt_func_res ${job_id_print} ${job_name} "UPDATE" "OK" "${msg_update_success}"

				else
				
					prt_func_res ${job_id_print} ${job_name} "UPDATE" "NOK" "${msg_update_failure}"

					fi 

			else

				prt_func_res ${job_id_print} ${job_name} "UPDATE" "NOK" "${msg_update_failure}"

			fi
		;;

		esac
}
