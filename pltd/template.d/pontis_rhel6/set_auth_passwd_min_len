#!/bin/bash
#
# NAME="set_auth_passwd_min_len"
# ARG_NUM="0"
# DESC="set pam authentication password min length for redhat 6"
# 

source modules.d/file_module.sh

function set_auth_passwd_min_len {

	local job_name="$2"
	local job_id="$3"
  local job_id_print=`if [[ ${job_id} -lt 10 ]]; then echo "0${job_id}" ;  else echo ${job_id} ; fi`
	local msg_test_success="passwd min len correctly set"
	local msg_test_failure="passwd min len is not correctly set"
  local msg_backup_success="passwd config backup success"
	local msg_backup_failure="passwd config backup failed"
	local msg_restore_success="restore passwd config success"
	local msg_restore_failure="restore passwd config failed"
	local msg_update_success="update passwd config min len success"
	local msg_update_failure="update passwd min len failed"
	local file_name="/etc/pam.d/system-auth"
	local string="minlen=8"
	local pattern_exist=0
	local pattern

	if [[ `egrep -oc "password.*cracklib\.so.*${string}" ${file_name}` -eq 1 ]]; then

		local pattern_exist=1

	else

		local pattern=`egrep "password.*cracklib\.so" ${file_name} | egrep -o "minlen=[1-9]*"`

	fi

	case $1 in
		test)
			
			if [[ ${pattern_exist} -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "TEST" "OK" "${msg_test_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "TEST" "NOK" "${msg_test_failure}"

			fi
		;;

		backup)

			cmd_line="sed -i 's/minlen=8\ /${pattern}/' ${file_name}"
			
			if [[ `metadata_write_restore_cmd "${job_id}" "${cmd_line}"` -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "BACKUP" "OK" "${msg_backup_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "BACKUP" "NOK" "${msg_backup_failure}"

			fi
		;;

		update)

			egrep "password.*cracklib\.so.*minlen=" ${file_name} &>/dev/null
				
			if [[ $? -eq 0 ]]; then

				sed -i "s/minlen=[1-9]*/minlen=8/" "${file_name}" &>/dev/null

			else

				sed -i "s/cracklib\.so/cracklib\.so\ minlen=8/" "${file_name}" &>/dev/null

			fi

			if [[ $? -eq 0 ]]; then

				prt_func_res ${job_id_print} ${job_name} "UPDATE" "OK" "${msg_update_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "UPDATE" "NOK" "${msg_update_failure}"
		
			fi
		;;

		restore)

			if [[ `metadata_is_restore_cmd "${job_id}"` -eq 1 ]]; then
			
				local restore_cmd=`metadata_get_restore_cmd "${job_id}"`
				eval ${restore_cmd}

				prt_func_res ${job_id_print} ${job_name} "RESTORE" "OK" "${msg_restore_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "RESTORE" "NOK" "${msg_restore_failure}"

			fi		
		;;


	esac
}