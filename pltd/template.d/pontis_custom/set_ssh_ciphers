#!/bin/bash
#
# NAME="set_ssh_alive_count"
# ARG_NUM="0"
# DESC="set ssh server alive count"
# 

source modules.d/file_module.sh

function set_ssh_ciphers {

	local job_name="$2"
	local job_id="$3"
	local job_id_print=`if [[ ${job_id} -lt 10 ]]; then echo "0${job_id}" ; else echo ${job_id} ; fi`
	local msg_test_success="${job_name} correctly set"
	local msg_test_failure="${job_name} not correctly set"
  local msg_backup_success="${job_name} backup success"
	local msg_backup_failure="${job_name} backup failed"
	local msg_restore_success="${job_name} restore success"
	local msg_restore_failure="${job_name} restore failed"
	local msg_update_success="${job_name} update success"
	local msg_update_failure="${job_name} update failed"
	local file_name="/etc/ssh/sshd_config"
	local pattern_wanted="Ciphers aes128-ctr,aes192-ctr,aes256-ctr"
	local keyword="Ciphers"
	local pattern_exist=0
	
	 
	if [[ `file_exist "file" "${file_name}"` -eq 1 ]]; then
	
		res=`file_match_pattern "${file_name}" "${pattern_wanted}" "${keyword}"`
		pattern_exist=`echo "${res}" | awk -F\| '{print $1}'`
	
		if [[ ${pattern_exist} -eq 0 ]]; then
	
			pattern=`echo "${res}" | awk -F\| '{print $2}'`
	
		fi
		
	fi

	case $1 in
		test)
		
			if [[ ${pattern_exist} -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "TEST" "OK" "${msg_test_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "TEST" "NOK" "${msg_test_failure}"

			fi
		;;

		backup)

			if [[ ${pattern} == "" ]]; then

				cmd_line="sed -i '/${pattern_wanted}/d' ${file_name} &>/dev/null"

			else

				cmd_line="sed -i 's/${pattern_wanted}/${pattern}/' ${file_name} &>/dev/null"

			fi

			if [[ `metadata_write_restore_cmd "${job_id}" "${cmd_line}"` -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "BACKUP" "OK" "${msg_backup_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "BACKUP" "NOK" "${msg_backup_failure}"

			fi
		;;

		restore)

			if [[ `metadata_is_restore_cmd "${job_id}"` -eq 1 ]]; then
			
				local restore_cmd=`metadata_get_restore_cmd "${job_id}"`
				eval ${restore_cmd}

				prt_func_res ${job_id_print} ${job_name} "RESTORE" "OK" "${msg_restore_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "RESTORE" "NOK" "${msg_restore_failure}"
			
			fi		
		;;

		update)
			
			if [[ ${pattern} == "" ]]; then

				echo "${pattern_wanted}" 2>/dev/null >> "${file_name}"

			elif [[ `echo ${pattern} | awk '{print $1}'` != "Ciphers" ]]; then
				
				sed -i "s%${pattern}%${pattern_wanted}%" ${file_name} &>/dev/null

			elif [[ `echo ${pattern} | awk '{print $2}'` != "aes128-ctr,aes192-ctr,aes256-ctr" ]]; then

				sed -i "s%${pattern}%${pattern_wanted}%" ${file_name}

			fi

			if [[ $? -eq 0 ]]; then

				prt_func_res ${job_id_print} ${job_name} "UPDATE" "OK" "${msg_update_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "UPDATE" "NOK" "${msg_update_failure}"

			fi 
		;;

		esac
}