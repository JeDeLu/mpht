#!/bin/bash
#
# NAME="set_user_shell"
# ARG_NUM="2"
# ARG#1="user name to be set"
# ARG#2="shell name to be set"
# DESC="set shell to user"
# 

source modules.d/user_module.sh

function set_user_shell {
		
	local job_name="$2"
	local job_id="$3"
	local user_name="$4"
	local shell_wanted="$5"
	local job_id_print=`if [[ ${job_id} -lt 10 ]]; then echo "0${job_id}" ; else echo ${job_id} ; fi`
	local msg_test_success="user ${user_name} shell ${shell_wanted}  is correctly set"
	local msg_test_failure="user ${user_name} shell ${shell_wanted} is not correctly set"
  local msg_backup_success="backup ${user_name} shell ${shell_wanted} success"
	local msg_backup_failure="backup ${user_name} shell ${shell_wanted} failed"
	local msg_restore_success="restore ${user_name} shell ${shell_wanted} success"
	local msg_restore_failure="restore ${user_name} shell ${shell_wanted} failed"
	local msg_update_success="update ${user_name} shell ${shell_wanted} success"
	local msg_update_failure="update ${user_name} shell ${shell_wanted} failed"
	local usershell=`user_shell_get "${user_name}" | awk -F\| '{print $2}'`

	case $1 in
		test)

			if [[ `user_exist "${user_name}"` -eq 1 ]]; then

				if [[ ${usershell} == ${shell_wanted} ]] || [[ "${user_shell}" == "nouser" ]] ; then

					prt_func_res ${job_id_print} ${job_name} "TEST" "OK" "${msg_test_success}"

				else
				
					prt_func_res ${job_id_print} ${job_name} "TEST" "NOK" "${msg_test_failure}"

				fi
				
			else
			
			prt_func_res ${job_id_print} ${job_name} "TEST" "WARNING" "user ${user_name} not found"
				
			fi
		;;

		backup)

			cmd_line="usermod -s "${usershell}" "${user_name}" &>/dev/null"
			if [[ `metadata_write_restore_cmd "${job_id}" "${cmd_line}"` -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "BACKUP" "OK" "${msg_backup_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "BACKUP" "NOK" "${msg_backup_failure}"

			fi			
		;;

		restore)

			if [[ `metadata_is_restore_cmd "${job_id}"` -eq 1 ]]; then
			
				local restore_cmd=`metadata_get_restore_cmd "${job_id}"`
				eval ${restore_cmd}

				prt_func_res ${job_id_print} ${job_name} "RESTORE" "OK" "${msg_restore_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "RESTORE" "NOK" "${msg_restore_failure}"

			fi
		;;

		update)
			
				
			if [[ `user_shell_set "${user_name}" "${shell_wanted}"` -eq 1 ]]; then

				prt_func_res ${job_id_print} ${job_name} "UPDATE" "OK" "${msg_update_success}"

			else
				
				prt_func_res ${job_id_print} ${job_name} "UPDATE" "NOK" "${msg_update_failure}"

			fi
		;;

	esac

}